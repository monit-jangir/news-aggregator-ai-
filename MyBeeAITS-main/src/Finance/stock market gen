/**
 * Copyright 2025 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  BaseToolOptions,
  BaseToolRunOptions,
  ToolEmitter,
  JSONToolOutput,
  Tool,
  ToolError,
  ToolInput,
  ToolInputValidationError,
} from "../../tools/base";
import { z } from "zod";
import { createURLParams } from "../../internals/fetcher";
import { isNullish, omit, pickBy } from "remeda";
import { Cache } from "../../cache/decoratorCache";
import { RunContext } from "../../context";
import { Emitter } from "../../emitter/emitter";

export interface StockResponse {
  symbol: string;
  price: number;
  change: number;
  percentChange: string;
  timestamp: string;
}

export class StockMarketToolOutput extends JSONToolOutput<StockResponse> {}

export class StockMarketTool extends Tool<StockMarketToolOutput, BaseToolOptions, BaseToolRunOptions> {
  name = "StockMarket";
  description = `Fetch real-time stock market updates for a given company symbol.`;

  inputSchema() {
    return z
      .object({
        symbol: z.string().min(1).describe("Stock symbol of the company, e.g., AAPL, TSLA"),
      })
      .strip();
  }

  public readonly emitter: ToolEmitter<ToolInput<this>, StockMarketToolOutput> = Emitter.root.child({
    namespace: ["tool", "finance", "stockMarket"],
    creator: this,
  });


  protected async _run(
    { symbol }: ToolInput<this>,
    _options: Partial<BaseToolRunOptions>,
    run: RunContext<this>
  ) {
    const apiKey = "TMUPKEZH3I2ZODCH";
    const params = createURLParams({ symbol, apikey: apiKey });
    const response = await fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&${params}`);
    
    if (!response.ok) {
      const errorMessage = `Failed to fetch stock market data: ${await response.text()}`;
      throw new Error(errorMessage); // Use standard Error if ToolError doesn't allow arguments
  }
  

    const data = await response.json();
    if (!data || !data["Global Quote"]) {
      throw new Error(`Stock symbol '${symbol}' not found or API limit reached.`);
  }
  

    const stockData = {
      symbol: data["Global Quote"]["01. symbol"],
      price: parseFloat(data["Global Quote"]["05. price"]),
      change: parseFloat(data["Global Quote"]["09. change"]),
      percentChange: data["Global Quote"]["10. change percent"],
      timestamp: new Date().toISOString(),
    };

    return new StockMarketToolOutput(stockData);
  }
}
